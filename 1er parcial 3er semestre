# CODIGOS DE CLASE

## CLASE 1

while True:
    print("Mi calculadora")
    print("           ")
    print("1.suma")
    print("2.resta")
    print("3.multiplicacion")
    print("4.division")
    print("5.salir")

    opcion= input("seleciona")

    if opcion == "5":
        print("Hasta luego")
        break
num1=float(input("Ingresa un numero: "))
num2=float(input("Ingresa un numero: "))
if opcion =='1' :
    print("Resultado: ", num1 + num2)
elif opcion == '2':

    print("resultado: ",num1 - num2)
elif opcion == '3':
    print("resultado: ",num1 * num2)
elif opcion == '4':
    if num2 != 0 :
        print("Resultado: ", num1 / num2 )
    else: print("No se divide entre cero")
else: print("Gracias")



## CLASE 2

Elias = (1,2,3,4,)

print(Elias[1])


"""
type sirve para saber el tipo de dato



print(type(Elias))
print(type(4))
"""

"""

hints o pistas

numero: int = 10
numero = "dos"

print(numero)


"""


""" pip install mypy """


## CLASE 3

# operador logicos bool
True
False

if 5 > 4 :
    print(True)
print(5>7)   

received : bool = False
not received

nombre : str = "hugo"
""" print(type(nombre))
print(nombre.capitalize())
print(nombre.upper())
print(len(nombre)) """

print(f"{nombre.capitalize()},{nombre.upper()},{len(nombre)},{type(nombre)}")


""" print(5+4)
print(5-4)
print(5*4)
print(5/4)
print(5//4)
print(5%4)
print(5**4)
print(2+3-5*6 + 7 / 2 + 2**4 + 5//4 * 2 + 5%4 + 2.5 + 1 )


print(True and False)
print(True or False)
print(not False) """


n1: int = 10
n2: int = 20
edad: int = 18

""" if n1 > n2:
    print(f"{n1} > {n2}")
else:
    print(f"{n1} < {n2}")
 """

""" if edad > 18 :
    print("Mayor de edad")
elif edad == 18 :
    print("Acabas de llegar a la mayoria de edad")
else :
    print("Eres menor")  """       



 """ match True:
    case 18:
        print("acabas de llegar a la mayoria de edad")
    case edad > 18:     """

## CLASE 4

#Listas o colecciones

def suma(a,b):
    return a+b
def resta(a,b):
    return a-b
def multiplicacion(a,b):
    return a*b
def division(a,b):
    return a+b 

operaciones =[suma,resta,multiplicacion,division]
print(operaciones[0](5,4))
print(operaciones[1](5,4))
print(operaciones[2](5,4))
print(operaciones[3](5,4))
print("              ")

for operacion in operaciones:
    print(operacion(5,4))
Lista = [1,2,3,True,5.5,"hola",[1,2,3]]
print(Lista)
print(Lista[:])
print(Lista[0:])
print(Lista[7:-1])
print(Lista[:-1])
print(Lista[-3:-1]) 
#""" Lista[8]= "hola mundo"
#print(Lista[8]) """

#la lista es indexable y si se pueden cambiar los valores es lista mutable


""" def operaciones(a,b):
    return [a+b,a-b,a*b,a/b] """

""" respuestas = operaciones(5,4)
print(respuestas)
w,x,y,z = operaciones(5,4)
print(w)

res_suma,_,_,_ = operaciones(5,4)
print(res_suma) """

""" def suma(a,b):
    pass

print(suma(3,4)) """

#tuple

tupla1 = (1,2,3,True,5.5,"hola",[1,2,4])
tuplaf=(suma,resta,multiplicacion,division)

print(tuplaf[0](5,4))
Lista.append(10)
print(Lista)

tupla1.__add__((10,19))
print(tupla1)

def sumatoria(a:int,b:int) -> int:
    return a + b
    
def sum(a:int,b:int) -> (int,int):
    return (a+b,a-b)

(a,b)=sum(5,6)
a,b = sum(6,5)

print(a,b)
#range


numeros = range(5,10)
print(numeros)

for i in numeros:
    print(i,end=" ")


numeros_pares = range(2,11,2)

print("       ")

for par in numeros_pares:
    print(par,end=" ")
print("       ")

for item in range(2,11,2):
    print(item,end=" ")

ListaW = [3,6,7,40,34,67,89]
print("       ")
print(max(ListaW))
print("         ")
print(min(ListaW))
print("          ")
print(sorted(ListaW)) #el .sort tambien la ordena



#set conjuntos
# mi set no repite datos
mi_set = {1,2,3,3,3,3,3,3,3,2,32,343}
print(mi_set)

print("         ")
print(list(set(mi_set)))

mi_set1= {6,5,7,8,9,4,3,43,343,43,56,76}


print(mi_set.union(mi_set1))

#diccionarios

mi_dict = {"key":"valor"}

print(mi_dict["key"])
mi_dict.keys()
mi_dict.values()



for i in mi_dict:
    print(i)
 CLASE 5


""" import milibreria.Clase_5 as lib # as op funciona como para poner un apodo
import milibreria.resta as lib """

from milibreria import Clase_5,resta
      
if __name__=="__main__":
   print(Clase_5.suma(7,8))
   print(resta.resta(8,5))



   from dataclasses import dataclass

#decorador es una funcion que modifica otra funcion
@dataclass #decorators
class User:
    id: str
    name: str
    age: int

    def show_data(self):
        return f"ID: {self.id} Nombre: {self.name} Edad: {self.age}"

if "__name__"=="__main__":
    usuario= User("1","Kratos",65)
    usuario1= User("2","Kra",35)
    usuario2= User("3","tos",5)

    usuarios = [usuario,usuario1,usuario2]

    
    print(usuario.show_data())

## CLASE 6

import streamlit as st #no tengo streamlit, streamlit run main.py

#st.write("Hola ici")

st.sidebar.title("Agenda ici")

def pedir_valores():
    name = st.text_input("Nombre: ")
    n1 = st.number_input("Numero 1: ")
    n2 = st.number_input("Nunmero 2: ")

    if st.button("sumar"):
        st.success(f"Hola {name}")
        st.write(f"{n1} + {n2} = {n1+n2}")

opcion = st.sidebar.selectbox("opciones: ", ["suma", "Resta", "Multiplicaciones", "Division","Acerca de"])

match opcion:
    case "suma":
        st.write("Esta es la opcion de suma..")
        pedir_valores()
    case "Resta":
        st.write("Esta es la opcion de Resta..")
    case "Multiplicacion":  
        st.write("Esta es la opcion de Multiplicacion..")
    case "Division":      
        st.write("Esta es la opcion de Divison..")    
    case "Acerca de":
        st.write("Derechos reservados de ICI")

def suma(a: int,b: int)->int:
    return a + b

def suma1(a: float,b: float)->float:
    return a + b

def suma2(a: int|float,b: int|float)->int: # se puede poner una barra para que se puedan de dos I y instalar mypy
   return a + b

if __name__== "__main__":
   
   
   print(suma(5,6))
   print(suma1(5.5,6.6))
   print(suma2(5,6.5))
